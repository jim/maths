#!/usr/bin/env rbx

require 'rubygems'
require 'optparse'
require 'ostruct'
require 'pp'

$LOAD_PATH << File.expand_path('../../lib', __FILE__)

require 'maths'

def repl
  env = Maths::Environment.new
  require 'readline'
  puts "Welcome to maths. Type 'exit' to quit."
  line = 1
  loop do
    code = Readline.readline "maths> "
    exit 0 unless code and code != "exit"
    next if code =~ /^\s*$/
    puts env.eval(code)
  end
end

options = OpenStruct.new
options.run = true

files = OptionParser.new do |opts|
  opts.banner = "Maths."

  opts.on('-p', '--parse', 'Print results of initial parse') do |p|
    options.parse = p
  end

  opts.on('-g', '--graph', 'Print AST graph') do |g|
    options.graph = g
  end

  opts.on('-s', '--sexp', 'Print s-expression representation of AST') do |s|
    options.sexp = s
  end

  opts.on('-r', '--[no-]run', 'Execute the code') do |r|
    options.run = r
  end
end.permute!

if files.any?
  code = files.map { |f| File.read(f) }.join("\n")

  compiled = Maths::Compiler.compile(code) do |compiler|
    compiler.parser.print_tree if options.parse
    compiler.transform.print_ast if options.graph
    compiler.transform.print_sexp if options.sexp
  end

  Rubinius.run_script(compiled) if options.run
else
  if $stdin.tty?
    repl
  end
end
